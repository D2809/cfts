AWSTemplateFormatVersion: 2010-09-09
Description: Creating Cloud ADS instances
Metadata:
  CommitHash: <<GIT_COMMIT_ID>>
  Version: <<TEMPLATE_VERSION>>
Parameters:
  projectStack:
    Description: 'Project name [default edp-rt] (lowercase alphanumeric)'
    Type: String
    Default: edp-rt
    MinLength: 1
    AllowedPattern: '^[a-z0-9-]*$'
  account:
    Description: Choose which TR account should be deployed to
    Type: String
    Default: tr-fr-preprod
    AllowedValues:
      - tr-fr-sandbox
      - tr-fr-preprod
      - tr-fr-prod
  environment:
    Description: 'tr:environment, tr:environment-type'
    Type: String
    Default: DEVELOPMENT
    AllowedValues:
      - PRODUCTION
      - PRE-PRODUCTION
      - QUALITY-ASSURANCE
      - INTEGRATION-TESTING
      - DEVELOPMENT
      - LAB
  subEnvironment:
    Description: 'tr:sub-environment'
    Type: String
    Default: tjd
    MinLength: 1
    MaxLength: 9
    AllowedPattern: '^[a-z0-9-]*$'
  deployment:
    Description: 'Deployment (blue|green) and deployment version (#) e.g. ''blue-1'''
    Type: String
    Default: blue-1
    MinLength: 6
    AllowedPattern: '^[a-z0-9]*-[0-9]*$'
  financialIdentifier:
    Description: 'tr:financial-identifier'
    Type: String
    Default: 283711002
    AllowedPattern: '^[0-9]*$'
  applicationAssetInsightId:
    Description: 'tr:application-asset-insight-id'
    Type: String
    Default: 205069
    AllowedPattern: '^[0-9]*$'
  resourceOwner:
    Description: 'tr:resource-owner - email address'
    Type: String
    Default: divya.vedhire@thomsonreuters.com
    MinLength: 1
  VpcId:
    Description: which VPC this should be deployed to
    Type: String
    Default: vpc-0261f464
  subnetId:
    Description: Subnet ID for the private subnet
    Type: String
    Default: subnet-86febcab
  privateSubnets:
    Description: Choose which subnets this should be deployed to
    Type: 'List<AWS::EC2::Subnet::Id>'
    Default: subnet-86febcab
  InstanceType:
    Description: Which instance type should we use to build
    Type: String
    AllowedValues:
      - t2.micro
      - m5.large
      - m5.xlarge
      - m5.2xlarge
      - m5.4xlarge
  EC2KeyPairName:
    Description: Key-pair name used for SSH access to ADS hosts
    Type: String
    Default: ''
  EC2AuthKey:
    Description: String to append to authorized_keys (disabled for prod env)
    Type: String
    Default: ''
    NoEcho: true
Mappings:
  RegionProperties:
    eu-west-1:
      Ec2Ami: ami-0bdb1d6c15a40392c
      Abbr: euw1
    us-east-1:
      Ec2Ami: ami-04681a1dbd79675a5
      Abbr: use1
  use1:  # N Virginia
   tr-fr-prod:
     VpcId: vpc-ffae3c99  # tr-vpc-1
     sgFromBastion: sg-65f42917  # fromBastionSSH
     s3Bucket: 'arn:aws:s3:::a205069-resources-edp-rt-main-production-use1-tr-fr-prod'
     CidrIp: '10.62.0.0/16'
   tr-fr-preprod:
     VpcId: vpc-0261f464  # tr-vpc-1
     sgFromBastion: sg-effe239d  # fromBastionSSH
     s3Bucket: 'arn:aws:s3:::a205069-resources-edp-rt-main-pre-production-use1-tr-fr-preprod'
     CidrIp: '10.97.0.0/16'
   tr-fr-sandbox:
     VpcId: vpc-c451cea2  # tr-vpc-1
     sgFromBastion: sg-54d20f26  # fromBastionSSH
     s3Bucket: 'arn:aws:s3:::a205069-resources-edp-rt-main-pre-production-use1-tr-fr-preprod'
     CidrIp: '10.97.0.0/16'

  euw1:  # Ireland
    tr-fr-prod:
      VpcId: vpc-12230976  # tr-vpc-1
      sgFromBastion: sg-e9cad091  # fromBastionSSH
      s3Bucket: 'arn:aws:s3:::a205069-resources-edp-rt-main-production-euw1-tr-fr-prod'
      CidrIp: '10.158.0.0/16'
    tr-fr-preprod:
      VpcId: vpc-dbbf96bf  # tr-vpc-1
      sgFromBastion: sg-a3cad0db  # fromBastionSSH
      s3Bucket: 'arn:aws:s3:::a205069-resources-edp-rt-main-pre-production-euw1-tr-fr-preprod'
      CidrIp: '10.97.0.0/16'
    tr-fr-sandbox:
      VpcId: vpc-98ab83fc  # tr-vpc-1
      sgFromBastion: sg-b8d2c8c0  # fromBastionSSH
      s3Bucket: 'arn:aws:s3:::a205069-resources-edp-rt-main-pre-production-euw1-tr-fr-preprod'
      CidrIp: '10.97.0.0/16'

  EC2Properties:
    t2.micro:
      CpuUnits: '1024'
    m5.large:
      CpuUnits: '2048'
    m5.xlarge:
      CpuUnits: '4096'
    m5.2xlarge:
      CpuUnits: '8192'
    m5.4xlarge:
      CpuUnits: '10240'
Conditions:
  HasVpcId: !Not 
    - !Equals 
      - !Ref VpcId
      - ''
Resources:
  # -------------------------------------------------------------------------
  # Identity & Access Management (IAM) related Resources
  # -------------------------------------------------------------------------

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    DependsOn:
    - EC2Role
    - AccessToElbPolicy
    - AccessToCWPolicy
    - AccessToCWLogsPolicy
    Properties:
      Path: '/service-role/'
      Roles:
      - !Ref EC2Role


  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub
      - "a${applicationAssetInsightId}-ec2-${projectStack}--${deployment}-${subEnvironment}-${EnvAbbr}-${RegAbbr}"
      - { EnvAbbr: !FindInMap [EnvProperties, !Ref environment, abbr],
          RegAbbr: !FindInMap [RegionProperties, !Ref "AWS::Region", Abbr] }
      Path: '/LaunchConfig-role/'
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Action: ['sts:AssumeRole']
          Principal:
            Service: ['ec2.amazonaws.com']

  AutoScalerRole:
    Type: AWS::IAM::Role
    Condition: AllResources
    Properties:
      RoleName: !Sub
      - "a${applicationAssetInsightId}-as-${projectStack}-${deployment}-${subEnvironment}-${EnvAbbr}-${RegAbbr}"
      - { EnvAbbr: !FindInMap [EnvProperties, !Ref environment, abbr],
          RegAbbr: !FindInMap [RegionProperties, !Ref "AWS::Region", Abbr] }
      Path: '/LaunchConfig-role/'
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Action: ['sts:AssumeRole']
          Principal:
            Service: ['application-autoscaling.amazonaws.com']

 
  # Policy to allow EC2 (ecs-agent) to pull images from the ECR
  AccessToCWPolicy:
    Type: AWS::IAM::Policy
    DependsOn: [EC2Role]
    Properties:
      PolicyName: !Sub
      - "a${applicationAssetInsightId}-cw-sp-${projectStack}-${deployment}-${subEnvironment}-${EnvAbbr}-${RegAbbr}"
      - { EnvAbbr: !FindInMap [EnvProperties, !Ref environment, abbr],
          RegAbbr: !FindInMap [RegionProperties, !Ref "AWS::Region", Abbr] }
      PolicyDocument:
        Statement:
        - Effect: Allow
          Resource: '*'
          Action:
          - "cloudwatch:PutMetricData"
          - "cloudwatch:GetMetricStatistics"
      Roles:
      - !Ref EC2Role

  # This matches Amazon's CloudWatchAgentServerPolicy
  # Allows Amazon-CloudWatch-Agent (on the ads ec2) to push ads logs to CloudWatch
  # this agent is installed and running in the ads-mon Docker container
  AccessToCWLogsPolicy:
    Type: AWS::IAM::Policy
    DependsOn: [EC2Role]
    Properties:
      PolicyName: !Sub
      - "a${applicationAssetInsightId}-cwlogs-sp-${projectStack}-${deployment}-${subEnvironment}-${EnvAbbr}-${RegAbbr}"
      - { EnvAbbr: !FindInMap [EnvProperties, !Ref environment, abbr],
          RegAbbr: !FindInMap [RegionProperties, !Ref "AWS::Region", Abbr] }
      PolicyDocument:
        Statement:
        - Effect: Allow
          Resource: '*'
          Action:
          - "cloudwatch:PutMetricData"
          - "ec2:DescribeTags"
          - "logs:PutLogEvents"
          - "logs:DescribeLogStreams"
          - "logs:DescribeLogGroups"
          - "logs:CreateLogStream"
          - "logs:CreateLogGroup"
        - Effect: Allow
          Resource: 'arn:aws:ssm:*:*:parameter/AmazonCloudWatch-*'
          Action:
          - "ssm:GetParameter"
      Roles:
      - !Ref EC2Role


  AccessToElbPolicy:
    Type: AWS::IAM::Policy
    DependsOn: [EC2Role]
    Properties:
      PolicyName: !Sub
      - "a${applicationAssetInsightId}-elb-sp-${projectStack}-${deployment}-${subEnvironment}-${EnvAbbr}-${RegAbbr}"
      - { EnvAbbr: !FindInMap [EnvProperties, !Ref environment, abbr],
          RegAbbr: !FindInMap [RegionProperties, !Ref "AWS::Region", Abbr] }
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: Allow
          Resource: '*'
          Action:
          - "ec2:AuthorizeSecurityGroupIngress"
          - "ec2:Describe*"
          - "elasticloadbalancing:DeregisterInstancesFromLoadBalancer"
          - "elasticloadbalancing:Describe*"
          - "elasticloadbalancing:RegisterInstancesWithLoadBalancer"
          - "elasticloadbalancing:DeregisterTargets"
          - "elasticloadbalancing:DescribeTargetGroups"
          - "elasticloadbalancing:DescribeTargetHealth"
          - "elasticloadbalancing:RegisterTargets"
      Roles:
      - !Ref EC2Role

  AutoScalerToManyPolicy:
    Type: AWS::IAM::Policy
    Condition: AllResources
    DependsOn: [AutoScalerRole]
    Properties:
      PolicyName: !Sub
      - "a${applicationAssetInsightId}-as-sp-${projectStack}-${deployment}-${subEnvironment}-${EnvAbbr}-${RegAbbr}"
      - { EnvAbbr: !FindInMap [EnvProperties, !Ref environment, abbr],
          RegAbbr: !FindInMap [RegionProperties, !Ref "AWS::Region", Abbr] }
      PolicyDocument:
        Statement:
        - Effect: Allow
          Resource: '*'
          Action:
          - "application-autoscaling:*"
          - "cloudwatch:DescribeAlarms"
          - "cloudwatch:PutMetricAlarm"
          - "ecs:DescribeServices"
          - "ecs:UpdateService"
      Roles:
      - !Ref AutoScalerRole
	  
  ADSSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Web server
      GroupName: ADS-webSecurityGroup
      VpcId: !If 
        - HasVpcId
        - !Ref VpcId
        - !FindInMap 
          - !FindInMap 
            - RegionProperties
            - !Ref 'AWS::Region'
            - Abbr
          - !Ref account
          - VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/16
  ADSNLB:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Type: network
      Name: !Sub 
        - '${StackName}-nlb'
        - StackName: !Ref 'AWS::StackName'
      Scheme: internal
      Subnets:
        - !Ref subnetId
      Tags:
        - Key: Name
          Value: !Sub 
            - '${StackName}-ADS-alb'
            - StackName: !Ref 'AWS::StackName'
  ADSNLBListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ADSNLBTargetGroup
      LoadBalancerArn: !Ref ADSNLB
      Port: 80
      Protocol: TCP
  ADSNLBTargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      Matcher:
        HttpCode: 200-399
      Name: !Sub 
        - '${StackName}-http-tg'
        - StackName: !Ref 'AWS::StackName'
      Port: 80
      Protocol: TCP
      Tags:
        - Key: Name
          Value: alb-tg
      VpcId: !If 
        - HasVpcId
        - !Ref VpcId
        - !FindInMap 
          - !FindInMap 
            - RegionProperties
            - !Ref 'AWS::Region'
            - Abbr
          - !Ref account
          - VpcId
  Autoscalinggroupstack:
    Type: 'AWS::CloudFormation::Stack'
    DependsOn: [EC2InstanceProfile, ADSSecurityGroup,ADSNLBTargetGroup]
    Properties:
      Parameters:
        ImageId: !FindInMap 
          - RegionProperties
          - !Ref 'AWS::Region'
          - Ec2Ami
        EC2KeyPairName: !Ref EC2KeyPairName
        InstanceType: !Ref InstanceType
        subnetId: !Ref subnetId
        projectStack: !Ref projectStack
        account: !Ref account
        environment: !Ref environment
        ADSSecurityGroup: !Ref ADSSecurityGroup
        ADSNLBTargetGroup: !Ref ADSNLBTargetGroup
		sgFromBastion:
		- !FindInMap [!FindInMap [RegionProperties, !Ref "AWS::Region", Abbr], !Ref account, sgFromBastion]
		EC2InstanceProfile: !Ref EC2InstanceProfile
      TemplateURL: 'https://s3.amazonaws.com/adscfts/Autoscalinggroupstack.json'
      TimeoutInMinutes: '5'
