AWSTemplateFormatVersion: 2010-09-09
Description: Amazon EKS - Node Group
Parameters:
  projectStack:
    Description: 'Project name [default edp-rt] (lowercase alphanumeric)'
    Type: String
    Default: edp-rt
    MinLength: 1
    AllowedPattern: '^[a-z0-9-]*$'
  account:
    Description: Choose which TR account should be deployed to
    Type: String
    Default: tr-fr-preprod
    AllowedValues:
      - tr-fr-sandbox
      - tr-fr-preprod
      - tr-fr-prod
  applicationAssetInsightId:
    Description: 'tr:application-asset-insight-id'
    Type: String
    Default: 205069
    AllowedPattern: '^[0-9]*$'
  environment:
    Description: 'tr:environment, tr:environment-type'
    Type: String
    Default: DEVELOPMENT
    AllowedValues:
      - PRODUCTION
      - PRE-PRODUCTION
      - QUALITY-ASSURANCE
      - INTEGRATION-TESTING
      - DEVELOPMENT
      - LAB
  subEnvironment:
    Description: 'tr:sub-environment'
    Type: String
    Default: tjd
    MinLength: 1
    MaxLength: 9
    AllowedPattern: '^[a-z0-9-]*$'
  EkssggroupId: 
    Description: 'Chose Security group id for EKS clusters'
    Type: 'AWS::EC2::SecurityGroup::Id'     
  privateSubnetId1:
    Description: Choose first subnet in one avilabiliyzone this should be deployed to
    Type: 'AWS::EC2::Subnet::Id'
  privateSubnetId2:
    Description: Choose second subnet in another avilabiliyzone this should be deployed to
    Type: 'AWS::EC2::Subnet::Id'
Mappings:
  RegionProperties:
    eu-west-1:
      Abbr: euw1
    us-east-1:
      Abbr: use1
  EnvProperties:
    PRODUCTION:
      tolower: production
      abbr: prd
    PRE-PRODUCTION:
      tolower: pre-production
      abbr: pp
    QUALITY-ASSURANCE:
      tolower: quality-assurance
      abbr: qa
    INTEGRATION-TESTING:
      tolower: integration-testing
      abbr: it
    DEVELOPMENT:
      tolower: development
      abbr: dev
    LAB:
      tolower: lab
      abbr: lab
Resources:
  EKSClusteriamRole:
    Description: Allows EKS to manage clusters on your behalf.
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub 
        - >-
          a${applicationAssetInsightId}-as-${projectStack}-${subEnvironment}-${EnvAbbr}-${RegAbbr}
        - EnvAbbr: !FindInMap 
            - EnvProperties
            - !Ref environment
            - abbr
          RegAbbr: !FindInMap 
            - RegionProperties
            - !Ref 'AWS::Region'
            - Abbr
      Path: /EKS-role/
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          Effect: Allow
          Principal:
            Service:
              - eks.amazonaws.com
          Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonEKSClusterPolicy'
        - 'arn:aws:iam::aws:policy/AmazonEKSServicePolicy'
  EKSCluster:
    Type: 'AWS::EKS::Cluster'
    Properties:
      Name: !Sub 
        - >-
          a${applicationAssetInsightId}-eks-${projectStack}-${subEnvironment}-${EnvAbbr}-${RegAbbr}
        - EnvAbbr: !FindInMap 
            - EnvProperties
            - !Ref environment
            - abbr
          RegAbbr: !FindInMap 
            - RegionProperties
            - !Ref 'AWS::Region'
            - Abbr
      Version: '1.10'
      RoleArn: !GetAtt 
        - EKSClusteriamRole
        - Arn
      ResourcesVpcConfig:
        SecurityGroupIds: 
          - !Ref EkssggroupId
        SubnetIds:
          - !Ref privateSubnetId1
          - !Ref privateSubnetId2
Outputs:
  EKSClusterName:
    Value: !Ref EKSCluster
    Description: Cluster Name
    Export:
      Name: !Sub '${AWS::StackName}-EKSClusterName'
  EKSClusterArn:
    Value: !GetAtt 
      - EKSCluster
      - Arn
    Description: Cluster Arn
    Export:
      Name: !Sub '${AWS::StackName}-EKSClusterArn'
  EKSClusterEndpoint:
    Value: !GetAtt 
      - EKSCluster
      - Endpoint
    Description: Cluster Endpoint
    Export:
      Name: !Sub '${AWS::StackName}-EKSClusterEndpoint'
